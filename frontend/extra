import { useRef, useState, useEffect } from "react";
import { FaArrowRight } from "react-icons/fa";
import { FaArrowLeft } from "react-icons/fa";

const Carousel = () => {
  const carouselRef = useRef(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  // Example images (you can replace with actual URLs)
  const slides = [
    "https://assets-in.bmscdn.com/promotions/cms/creatives/1728051557401_gauravguptalivetalkatorastadiumshowwebshowcase1240x300.jpg",
    "https://assets-in.bmscdn.com/promotions/cms/creatives/1728390794440_bandlanddesktop.jpg",
    "https://assets-in.bmscdn.com/promotions/cms/creatives/1726036566435_playcardnewweb.jpg",
    "https://assets-in.bmscdn.com/promotions/cms/creatives/1729061343554_parmishvermawebshowcase1240x300.jpg",
  ];

  const totalSlides = slides.length;

  // Helper function to scroll to a specific slide
  const scrollToSlide = (index) => {
    const carousel = carouselRef.current;
    const slideWidth = carousel.offsetWidth * 0.8; // 80% of the container width
    carousel.scrollTo({ left: slideWidth * index, behavior: "smooth" });
  };

  // Infinite scrolling behavior
  const handleScroll = () => {
    const carousel = carouselRef.current;
    const slideWidth = carousel.offsetWidth * 0.8;

    if (carousel.scrollLeft <= 0) {
      carousel.scrollLeft = slideWidth * totalSlides;
    } else if (carousel.scrollLeft >= slideWidth * (totalSlides + 1)) {
      carousel.scrollLeft = slideWidth;
    }
  };

  // Auto-scroll every 3 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      handleArrowClick(1);
    }, 3000);
    return () => clearInterval(interval);
  }, [currentIndex]);

  // Handle navigation arrows
  const handleArrowClick = (direction) => {
    let newIndex = currentIndex + direction;
    if (newIndex < 0) newIndex = totalSlides - 1;
    if (newIndex >= totalSlides) newIndex = 0;
    setCurrentIndex(newIndex);
    scrollToSlide(newIndex);
  };

  // Scroll to the first slide on initial load
  useEffect(() => {
    const carousel = carouselRef.current;
    const slideWidth = carousel.offsetWidth * 0.8;
    carousel.scrollLeft = slideWidth;
  }, []);

  return (
    <div className="container mx-auto py-12">
      <div className="relative">
        {/* Carousel Wrapper */}
        <div
          ref={carouselRef}
          onScroll={handleScroll}
          className="flex overflow-x-scroll scroll-smooth snap-x snap-mandatory scrollbar-hide"
        >
          {/* Cloned Last Slide (for infinite scroll) */}
          <div className="flex-none w-[80%] h-[300px] mx-2 snap-center rounded-lg overflow-hidden">
            <img
              src={slides[slides.length - 1]}
              alt="Cloned Last Slide"
              className="w-full h-full object-cover"
            />
          </div>

          {/* Actual Slides */}
          {slides.map((slide, index) => (
            <div
              key={index}
              className={`flex-none h-[300px] mx-2 snap-center rounded-lg overflow-hidden transition-all duration-300 ${
                currentIndex === index ? "w-[80%]" : "w-[60%]"
              }`}
            >
              <img
                src={slide}
                alt={`Slide ${index + 1}`}
                className="w-full h-full object-cover"
              />
            </div>
          ))}

          {/* Cloned First Slide (for infinite scroll) */}
          <div className="flex-none w-[80%] h-[300px] mx-2 snap-center rounded-lg overflow-hidden">
            <img
              src={slides[0]}
              alt="Cloned First Slide"
              className="w-full h-full object-cover"
            />
          </div>
        </div>

        {/* Navigation Arrows */}
        <button
          onClick={() => handleArrowClick(-1)}
          className="absolute ml-4 left-0 top-1/2 bg-whitish transform-translate-y-1/2 bg-gray-700 text-white p-3 rounded-full"
        >
          <FaArrowLeft />
        </button>
        <button
          onClick={() => handleArrowClick(1)}
          className="absolute mr-4 right-0 top-1/2 bg-whitish transform-translate-y-1/2 bg-gray-700 text-white p-3 rounded-full"
        >
          <FaArrowRight />
        </button>

        {/* Pagination Dots */}
        <div className="flex justify-center mt-4 space-x-2">
          {slides.map((_, index) => (
            <div
              key={index}
              onClick={() => scrollToSlide(index)}
              className={`cursor-pointer ${
                currentIndex === index
                  ? "w-8 h-3 bg-gray-900 rounded-full"
                  : "w-3 h-3 bg-gray-400 rounded-full"
              } transition-all duration-300`}
            ></div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Carousel;